name: 'Pushover'
description: 'Send notification to device via the Pushover API (https://pushover.net/api)'
inputs:
  message:
    description: "The body of the notification"
    required: true
  priority:
    description: "Message priority, an integer from -2 to 2, see: https://pushover.net/api#priority; defaults to 0 (normal priority)"
    required: true
    default: 0
  title:
    description: "The title of the notification; if not provided, the application's name will be used"
    required: false
  device:
    description: "The name of the device to send the notification to; if not provided, the notification will be sent to all devices"
    required: false
  po_key:
    description: "Pushover user key"
    required: true
  po_token:
    description: "Pushover application token"
    required: true
runs:
  using: 'composite'
  steps:
    - name: Send notification
      run: |
        export MESSAGE="${{ inputs.message }}"
        export PRIORITY="${{ inputs.priority }}"
        export TITLE="${{ inputs.title }}"
        export DEVICE="${{ inputs.device }}"
        export PO_KEY="${{ inputs.po_key }}"
        export PO_TOKEN="${{ inputs.po_token }}"
        python - <<EOF
        import os, http.client, urllib
        # read parameters
        title = os.environ['TITLE']
        if title == '':
          title = None
        device = os.environ['DEVICE']
        if device == '':
          device = None
        # assemble body
        body = {
        'token': os.environ['PO_TOKEN'],
        'user': os.environ['PO_KEY'],
        'message': os.environ['MESSAGE'],
        'priority': os.environ['PRIORITY'],
        'title': title,
        'device': device
        }
        # remove unused parameters
        if (title is None):
            body.pop('title')
        if (device is None):
            body.pop('device')
        # encode body
        body_enc = urllib.parse.urlencode(body)
        # send notification
        conn = http.client.HTTPSConnection('api.pushover.net:443')
        conn.request('POST', '/1/messages.json', body_enc, { 'Content-type': 'application/x-www-form-urlencoded' })
        status = conn.getresponse().status
        # check response
        if (status == 200):
            print('Notification sent successfully.')
        else:
            print('Status: ' + str(status))
            print('Notification did not send successfully.')
        # close connection
        conn.close()
        EOF
      shell: bash
